// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.3
// source: processor.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Processor_Initialize_FullMethodName = "/wingman.Processor/Initialize"
)

// ProcessorClient is the client API for Processor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessorClient interface {
	Initialize(ctx context.Context, opts ...grpc.CallOption) (Processor_InitializeClient, error)
}

type processorClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessorClient(cc grpc.ClientConnInterface) ProcessorClient {
	return &processorClient{cc}
}

func (c *processorClient) Initialize(ctx context.Context, opts ...grpc.CallOption) (Processor_InitializeClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Processor_ServiceDesc.Streams[0], Processor_Initialize_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &processorInitializeClient{ClientStream: stream}
	return x, nil
}

type Processor_InitializeClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type processorInitializeClient struct {
	grpc.ClientStream
}

func (x *processorInitializeClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processorInitializeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessorServer is the server API for Processor service.
// All implementations must embed UnimplementedProcessorServer
// for forward compatibility
type ProcessorServer interface {
	Initialize(Processor_InitializeServer) error
	mustEmbedUnimplementedProcessorServer()
}

// UnimplementedProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedProcessorServer struct {
}

func (UnimplementedProcessorServer) Initialize(Processor_InitializeServer) error {
	return status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedProcessorServer) mustEmbedUnimplementedProcessorServer() {}

// UnsafeProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessorServer will
// result in compilation errors.
type UnsafeProcessorServer interface {
	mustEmbedUnimplementedProcessorServer()
}

func RegisterProcessorServer(s grpc.ServiceRegistrar, srv ProcessorServer) {
	s.RegisterService(&Processor_ServiceDesc, srv)
}

func _Processor_Initialize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessorServer).Initialize(&processorInitializeServer{ServerStream: stream})
}

type Processor_InitializeServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type processorInitializeServer struct {
	grpc.ServerStream
}

func (x *processorInitializeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processorInitializeServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Processor_ServiceDesc is the grpc.ServiceDesc for Processor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Processor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wingman.Processor",
	HandlerType: (*ProcessorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Initialize",
			Handler:       _Processor_Initialize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "processor.proto",
}
